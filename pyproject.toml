[build-system]
requires = [
    "scikit-build-core>=0.5.0",
    "Cython>=0.29.33",
    "setuptools>=42.0.0",
    "wheel>=0.37.0",
    "cmake>=3.21.0"
]
build-backend = "scikit_build_core.build"

[project]
name = "hummingbot-candles-feed"
version = "0.1.0"
description = "A modular, plugin-based framework for fetching and managing candle data from cryptocurrency exchanges"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "Apache-2.0"}
authors = [
    {name = "Hummingbot Contributors", email = "dev@hummingbot.io"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Cython",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Financial :: Trading",
]
dependencies = [
    "pandas>=1.0.0",
    "numpy>=1.20.0",
    "aiohttp>=3.8.0",
    "websockets>=10.0",
    "pydantic>=1.8.0",
]

[project.urls]
Homepage = "https://github.com/MementoRC/hb-candles-feed"
Documentation = "https://github.com/MementoRC/hb-candles-feed/tree/main/docs"
Repository = "https://github.com/MementoRC/hb-candles-feed"

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-asyncio>=0.18.0",
    "pytest-cov>=2.12.0",
    "pytest-mock>=3.6.0",
    "pytest-timeout>=2.0.0",
    "black>=22.0.0",
    "mypy>=0.910",
    "isort>=5.9.0",
]
doc = [
    "mkdocs>=1.3.0",
    "mkdocs-material>=8.2.0",
    "mkdocstrings>=0.18.0",
]
hummingbot = [
    # Hummingbot-specific dependencies would go here
]

[tool.scikit-build]
# Enable wheel creation
wheel.packages = ["candles_feed"]
# Set source directory - only needed if CMakeLists.txt is not in the root
cmake.source-dir = "."
# Enable verbose CMake output for debugging
cmake.verbose = false
# Enable experimental features like parallel building
experimental = false
# Minimum version
minimum-version = "0.5.0"
# Handle macOS universal wheels
wheel.expand-macos-universal-tags = true
# Build with as many cores as possible
build.parallel = true
# Make sure sdist contains all necessary files
sdist.exclude = ["build", "dist", "_skbuild", "**/__pycache__", "**/*.pyc", ".git"]

[tool.black]
line-length = 100
target-version = ["py38"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "e2e: marks tests as end-to-end tests",
    "asyncio: marks tests as asyncio tests",
]
log_cli = true
log_cli_level = "INFO"