name: Package CI

on:
  push:
    branches: [main, master, develop, development]
  pull_request:
    branches: [main, master, develop, development]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.8.8

      - name: Install project dependencies (using Pixi)
        run: |
          pixi install # This will install dependencies based on pyproject.toml and create/use pixi.lock
          pixi run pip install -e .

      - name: Run unit tests with coverage
        run: |
          # Run unit tests first to avoid URL patching pollution from integration tests
          pixi run pytest tests -m "not integration" --cov=candles_feed --cov-report=xml:coverage.xml
          
      - name: Run integration tests separately
        run: |
          # Run integration tests separately to prevent URL patching pollution
          pixi run pytest tests -m "integration" --cov=candles_feed --cov-append

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        with:
          files: ./coverage.xml
          fail_ci_if_error: false

  lint:
    name: Lint and Type Check (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.8.8

      - name: Install project dependencies (using Pixi)
        run: |
          pixi install # This will install dependencies based on pyproject.toml
          pixi run pip install -e .

      - name: Format and lint with ruff
        run: |
          pixi run ci-check

      - name: Type check with mypy
        run: |
          pixi run ci-hints

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.8.8

      - name: Install project dependencies (using Pixi)
        run: |
          pixi install
          pixi run pip install -e .

      - name: Run performance benchmarks
        run: |
          # Run existing performance tests as benchmarks
          pixi run pytest tests/performance/ -v --tb=short

      - name: Store benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            tests/performance/
            .pytest_cache/
          retention-days: 30
